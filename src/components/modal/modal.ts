import settings from 'carbon-components/es/globals/js/settings';
import on from 'carbon-components/es/globals/js/misc/on';
import classnames from 'classnames';
import { html, property, customElement, LitElement } from 'lit-element';
import styles from './modal.scss';
import BXModalCloseButton from './modal-close-button';

const { prefix } = settings;

@customElement(`${prefix}-modal` as any)
class BXModal extends LitElement {
  /**
   * The handle for the `click` event handler on this element.
   */
  private _hClick: Handle | null = null;

  /**
   * Handles `click` event on this element.
   * @param event The event.
   */
  private _handleClick = event => {
    if (event.composedPath().indexOf(this.shadowRoot) < 0) {
      this._handleUserInitiatedClose(event.target);
    }
  };

  /**
   * Handles `click` event on the modal container.
   * @param event The event.
   */
  private _handleClickContainer = (event: MouseEvent) => {
    if (
      (event.target as BXModalCloseButton)!.isModalCloseButton ||
      (event.target as HTMLElement)!.hasAttribute('data-modal-close')
    ) {
      this._handleUserInitiatedClose(event.target);
    }
  };

  /**
   * Handles user-initiated close request of this modal.
   * @param triggeredBy The element that triggered this close request.
   */
  private _handleUserInitiatedClose = (triggeredBy: EventTarget | null) => {
    const init = {
      bubbles: true,
      cancelable: true,
      detail: {
        triggeredBy,
      },
    };
    if (this.dispatchEvent(new CustomEvent((this.constructor as typeof BXModal).eventBeforeClose, init))) {
      this.open = false;
      this.dispatchEvent(new CustomEvent((this.constructor as typeof BXModal).eventAfterClose, init));
    }
  };

  /**
   * The additional CSS class names for the container <div> of the element. Corresponds to `container-class` attribute.
   */
  @property({ attribute: 'container-class' })
  containerClass = '';

  /**
   * `true` if the modal should be the danger variant. Corresponds to the attribute with the same name.
   */
  @property({ type: Boolean, reflect: true })
  danger = false;

  /**
   * `true` if the modal should be open. Corresponds to the attribute with the same name.
   */
  @property({ type: Boolean, reflect: true })
  open = false;

  render() {
    const containerClasses = classnames(`${prefix}--modal-container`, {
      [this.containerClass]: this.containerClass,
    });
    return html`
      <div class=${containerClasses} role="dialog" tabidnex="-1" @click=${this._handleClickContainer}><slot></slot></div>
    `;
  }

  connectedCallback() {
    this._hClick = on(this, 'click', this._handleClick);
    super.connectedCallback();
  }

  disconnectedCallback() {
    if (this._hClick) {
      this._hClick = this._hClick.release();
    }
  }

  /**
   * The name of the custom event fired before this modal is being closed upon a user gesture.
   * Cancellation of this event stops the user-initiated action of closing this modal.
   */
  static get eventBeforeClose() {
    return `${prefix}-modal-beingclosed`;
  }

  /**
   * The name of the custom event fired after this modal is closed upon a user gesture.
   */
  static get eventAfterClose() {
    return `${prefix}-modal-closed`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default BXModal;
