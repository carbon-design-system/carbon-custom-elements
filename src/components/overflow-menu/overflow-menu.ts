import settings from 'carbon-components/es/globals/js/settings';
import { html, property, customElement, LitElement } from 'lit-element';
import BXFloatingMenu from '../floating-menu/floating-menu';
import BXFloatingMenuTrigger from '../floating-menu/floating-menu-trigger';
import styles from './overflow-menu.scss';

const { prefix } = settings;
const find = (a: NodeListOf<Node>, predicate: (search: Node) => boolean) => Array.prototype.find.call(a, predicate);

/**
 * Overflow menu.
 */
@customElement(`${prefix}-overflow-menu` as any)
class BXOverflowMenu extends LitElement implements BXFloatingMenuTrigger {
  /**
   * The menu body.
   */
  private _menuBody: BXFloatingMenu | null = null;

  /**
   * Handles `click` event on the trigger button.
   */
  private _handleClickTrigger = () => {
    this.open = !this.open;
  };

  /**
   * `true` if the dropdown should be open. Corresponds to the attribute with the same name.
   */
  @property({ type: Boolean, reflect: true })
  open = false;

  /**
   * @returns The position of the trigger button in the viewport.
   */
  get triggerPosition() {
    return this.getBoundingClientRect();
  }

  connectedCallback() {
    if (!this.hasAttribute('role')) {
      this.setAttribute('role', 'button');
    }
    if (!this.hasAttribute('tabindex')) {
      // TODO: Should we use a property?
      this.setAttribute('tabindex', '0');
    }
    if (!this.hasAttribute('aria-haspopup')) {
      this.setAttribute('aria-haspopup', 'true');
    }
    if (!this.hasAttribute('aria-expanded')) {
      this.setAttribute('aria-expanded', 'false');
    }
    if (!this.shadowRoot) {
      this.attachShadow({ mode: 'open' });
    }
    super.connectedCallback();
  }

  attributeChangedCallback(name, old, current) {
    if (old !== current) {
      if (name === 'open' && !this._menuBody) {
        this._menuBody = find(this.childNodes, elem => (elem.constructor as typeof BXFloatingMenu).FLOATING_MENU);
      }
      if (this._menuBody) {
        this._menuBody.open = this.open;
      }
      this.setAttribute('aria-expanded', String(Boolean(this.open)));
    }
    super.attributeChangedCallback(name, old, current);
  }

  render() {
    return html`
      <svg
        id="trigger"
        aria-hidden="true"
        class="${prefix}--overflow-menu__icon"
        width="3"
        height="15"
        viewBox="0 0 3 15"
        @click=${this._handleClickTrigger}
      >
        <g fill-rule="evenodd">
          <circle cx="1.5" cy="1.5" r="1.5" />
          <circle cx="1.5" cy="7.5" r="1.5" />
          <circle cx="1.5" cy="13.5" r="1.5" />
        </g>
      </svg>
    `;
  }

  /**
   * The CSS selector to find the trigger button.
   */
  static selectorTrigger = '#trigger';

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default BXOverflowMenu;
