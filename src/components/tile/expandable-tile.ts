import { html, property, customElement, LitElement } from 'lit-element';
import ChevronDown16 from '@carbon/icons/lib/chevron--down/16';
import settings from 'carbon-components/es/globals/js/settings';
import HostListener from '../../globals/decorators/host-listener';
import HostListenerMixin from '../../globals/mixins/host-listener';
import styles from './tile.scss';

const { prefix } = settings;

/**
 * Expandable tile.
 */
@customElement(`${prefix}-expandable-tile`)
class BXExpandableTile extends HostListenerMixin(LitElement) {
  /**
   * Unique ID used for ID refs.
   */
  private _uniqueId = Math.random()
    .toString(36)
    .slice(2);

  /**
   * The element ID for the check box.
   */
  private get _iconId() {
    const { id: elementId, _uniqueId: uniqueId } = this;
    return `__bx-ce-selectable-tile_${elementId || uniqueId}`;
  }

  @HostListener('click')
  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to
  private _handleClick = () => {
    const expanded = !this.expanded;
    const init = {
      bubbles: true,
      composed: true,
      detail: {
        expanded,
      },
    };
    const constructor = this.constructor as typeof BXExpandableTile;
    const beforeChangeEvent = new CustomEvent(constructor.eventBeforeChange, {
      ...init,
      cancelable: true,
    });
    if (this.dispatchEvent(beforeChangeEvent)) {
      this.expanded = expanded;
      const afterChangeEvent = new CustomEvent(constructor.eventAfterChange, init);
      this.dispatchEvent(afterChangeEvent);
    }
  };

  /**
   * An assistive text for screen reader to announce, telling the collapsed state.
   * Corresponds to `collapsed-assistive-text` attribute.
   */
  @property({ attribute: 'collapsed-assistive-text' })
  collapsedAssistiveText!: string;

  /**
   * An assistive text for screen reader to announce, telling the expanded state.
   * Corresponds to `expanded-assistive-text` attribute.
   */
  @property({ attribute: 'expanded-assistive-text' })
  expandedAssistiveText!: string;

  /**
   * `true` to expand this expandable tile. Corresponds to the attribute with the same name.
   */
  @property({ type: Boolean, reflect: true })
  expanded = false;

  render() {
    const { collapsedAssistiveText, expandedAssistiveText, expanded, _iconId: iconId } = this;
    const assistiveText = expanded ? expandedAssistiveText : collapsedAssistiveText;
    return html`
      <button class="${prefix}--tile__chevron" aria-labelledby="${iconId}">
        ${ChevronDown16({
          id: iconId,
          alt: assistiveText,
          description: assistiveText,
          'aria-label': assistiveText,
        })}
      </button>
      <div class="${prefix}--tile-content">
        <slot></slot>
      </div>
    `;
  }

  updated(changedProperties) {
    if (changedProperties.has('expanded')) {
      const { expanded } = this;
      if (expanded) {
        this.style.maxHeight = '';
      } else {
        const aboveTheFoldContent = this.querySelector((this.constructor as typeof BXExpandableTile).selectorAboveTheFoldContent);
        if (aboveTheFoldContent) {
          const computedStyle = this.ownerDocument!.defaultView!.getComputedStyle(this, null);
          const height =
            aboveTheFoldContent.getBoundingClientRect().height +
            parseInt(computedStyle.getPropertyValue('padding-top'), 10) +
            parseInt(computedStyle.getPropertyValue('padding-bottom'), 10);
          this.style.maxHeight = `${height}px`;
        }
      }
    }
  }

  /**
   * A selector that will return the above-the-fold content.
   */
  static get selectorAboveTheFoldContent() {
    return `${prefix}-tile-above-the-fold-content`;
  }

  /**
   * The name of the custom event fired before the expanded state is changed upon a user gesture.
   * Cancellation of this event stops changing the user-initiated change in expanded state.
   */
  static get eventBeforeChange() {
    return `${prefix}-expandable-tile-beingchanged`;
  }

  /**
   * The name of the custom event fired after a the expanded state is changed upon a user gesture.
   */
  static get eventAfterChange() {
    return `${prefix}-expandable-tile-changed`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default BXExpandableTile;
