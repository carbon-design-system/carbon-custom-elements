/**
 * @license
 *
 * Copyright IBM Corp. 2019
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { html, property, customElement, LitElement } from 'lit-element';
import ChevronDown16 from '@carbon/icons/lib/chevron--down/16';
import settings from 'carbon-components/es/globals/js/settings';
import styles from './pagination.scss';

const { prefix } = settings;

/**
 * The select box for the current page.
 */
@customElement(`${prefix}-pages-select`)
class BXPagesSelect extends LitElement {
  /**
   * Unique ID used for ID refs.
   */
  protected _uniqueId = Math.random()
    .toString(36)
    .slice(2);

  /**
   * The element ID for the select box.
   */
  protected get _selectId() {
    const { id: elementId, _uniqueId: uniqueId } = this;
    return `__bx-ce-pages-select_${elementId || uniqueId}`;
  }

  /**
   * Handles `change` event on the `<select>` to select page size.
   */
  protected _handleChange({ target }: Event) {
    const value = Number((target as HTMLSelectElement).value);
    this.dispatchEvent(
      new CustomEvent((this.constructor as typeof BXPagesSelect).eventAfterChange, {
        bubbles: true,
        composed: true,
        detail: {
          value,
        },
      })
    );
    this.value = value;
  }

  /**
   * The formatter for the assistive text for screen readers to announce.
   * Should be changed upon the locale the UI is rendered with.
   */
  @property({ attribute: false })
  formatLabelText = ({ total }) => `Page number, of ${total} pages`;

  /**
   * The formatter for the text next to the select box. Should be changed upon the locale the UI is rendered with.
   */
  @property({ attribute: false })
  formatSupplementalText = ({ total }) => `of ${total} pages`;

  /**
   * The number of total pages. Corresponds to the attribute with the same name.
   */
  @property({ type: Number })
  total!: number;

  /**
   * The value, working as the current page, index that starts with zero. Corresponds to the attribute with the same name.
   */
  @property({ type: Number })
  value!: number;

  render() {
    const { formatLabelText, formatSupplementalText, total, value, _selectId: selectId, _handleChange: handleChange } = this;
    return html`
      <div class="${prefix}--select__page-number">
        <label for="${selectId}_page-number" class="${prefix}--label ${prefix}--visually-hidden">
          ${formatLabelText(this)}
        </label>
        <select id="${selectId}_page-number" class="${prefix}--select-input" .value="${value}" @change="${handleChange}">
          ${Array.from(new Array(total)).map(
            (_item, index) => html`
              <option value=${index}>${index + 1}</option>
            `
          )}
        </select>
        ${ChevronDown16({ class: `${prefix}--select__arrow` })}
      </div>
      <span class="${prefix}--pagination__text">
        ${formatSupplementalText(this)}
      </span>
    `;
  }

  /**
   * The name of the custom event fired after the page is changed.
   */
  static get eventAfterChange() {
    return `${prefix}-pages-select-changed`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default BXPagesSelect;
