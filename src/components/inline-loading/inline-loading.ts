import { html, svg, property, customElement, LitElement } from 'lit-element';
import Error20 from '@carbon/icons/lib/error/20';
import settings from 'carbon-components/es/globals/js/settings';
import styles from './inline-loading.scss';

const { prefix } = settings;

/**
 * Loading state for inline loading spinner.
 */
export enum INLINE_LOADING_STATE {
  /**
   * Inactive state.
   */
  INACTIVE = 'inactive',

  /**
   * State for loading in progress.
   */
  ACTIVE = 'active',

  /**
   * State for loading successful.
   */
  FINISHED = 'finished',

  /**
   * State for loading failure.
   */
  ERROR = 'error',
}

/**
 * Lnline loading spinner.
 */
@customElement(`${prefix}-inline-loading`)
class BXInlineLoading extends LitElement {
  /**
   * @returns The template for the status icon.
   */
  private _renderIcon() {
    const { status } = this;
    if (status === INLINE_LOADING_STATE.ERROR) {
      return Error20({
        class: `${prefix}--inline-loading--error`,
      });
    }
    if (status === INLINE_LOADING_STATE.FINISHED) {
      return svg`
        <svg
          class="${prefix}--inline-loading__checkmark-container ${prefix}--inline-loading__svg"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 10 10">
          <polyline
            class="${prefix}--inline-loading__checkmark"
            points="0.74 3.4 3.67 6.34 9.24 0.74"
          />
        </svg>
      `;
    }
    if (status === INLINE_LOADING_STATE.ACTIVE) {
      return html`
        <div class="${prefix}--loading ${prefix}--loading--small">
          <svg class="${prefix}--loading__svg" viewBox="-75 -75 150 150">
            <circle class="${prefix}--loading__background" cx="0" cy="0" r="37.5" />
            <circle class="${prefix}--loading__stroke" cx="0" cy="0" r="37.5" />
          </svg>
        </div>
      `;
    }
    return undefined;
  }

  /**
   * The loading status. Corresponds to the attribute with the same name.
   */
  @property({ reflect: true })
  status = INLINE_LOADING_STATE.ACTIVE;

  connectedCallback() {
    if (!this.hasAttribute('aria-live')) {
      this.setAttribute('aria-live', 'assertive');
    }
    super.connectedCallback();
  }

  render() {
    const statusIconResult = this._renderIcon();
    const statusIconWrapperResult = !statusIconResult
      ? undefined
      : html`
          <div class="${prefix}--inline-loading__animation">
            ${statusIconResult}
          </div>
        `;
    return html`
      ${statusIconWrapperResult}
      <p class="${prefix}--inline-loading__text"><slot></slot></p>
    `;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default BXInlineLoading;
