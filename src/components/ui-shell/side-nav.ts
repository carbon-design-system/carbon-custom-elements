/**
 * @license
 *
 * Copyright IBM Corp. 2019, 2020
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import settings from 'carbon-components/es/globals/js/settings';
import { html, property, customElement, LitElement } from 'lit-element';
import HostListenerMixin from '../../globals/mixins/host-listener';
import HostListener from '../../globals/decorators/host-listener';
import { forEach } from '../../globals/internal/collection-helpers';
import BXSideNavMenu from './side-nav-menu';
import styles from './side-nav.scss';

const { prefix } = settings;

/**
 * Side nav.
 * @element bx-side-nav
 */
@customElement(`${prefix}-side-nav`)
class BXSideNav extends HostListenerMixin(LitElement) {
  /**
   * `true` if this side nav is hovered.
   */
  private _hovered = false;

  /**
   * Force child side nav menus collapsed upon the hover/expanded state of this side nav.
   */
  private _updatedSideNavMenuForceCollapsedState() {
    const { expanded, _hovered: hovered } = this;
    forEach(this.querySelectorAll((this.constructor as typeof BXSideNav).selectorMenu), item => {
      (item as BXSideNavMenu).forceCollapsed = !expanded && !hovered;
    });
  }

  /**
   * Handles `mouseover` event handler.
   */
  @HostListener('mouseover')
  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to
  private _handleMouseover() {
    this._hovered = true;
    this._updatedSideNavMenuForceCollapsedState();
  }

  /**
   * Handles `mouseout` event handler.
   */
  @HostListener('mouseout')
  // @ts-ignore: The decorator refers to this method but TS thinks this method is not referred to
  private _handleMouseout() {
    this._hovered = false;
    this._updatedSideNavMenuForceCollapsedState();
  }

  /**
   * `true` to expand the side nav.
   */
  @property({ type: Boolean, reflect: true })
  expanded = false;

  /**
   * `true` to make the side nav non-collapsible.
   */
  @property({ type: Boolean, reflect: true })
  fixed = false;

  connectedCallback() {
    if (!this.hasAttribute('role')) {
      this.setAttribute('role', 'navigation');
    }
    super.connectedCallback();
  }

  updated(changedProperties) {
    if (changedProperties.has('expanded')) {
      this._updatedSideNavMenuForceCollapsedState();
    }
  }

  render() {
    return html`
      <slot></slot>
    `;
  }

  /**
   * A selector that will return side nav menus.
   */
  static get selectorMenu() {
    return `${prefix}-side-nav-menu`;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}

export default BXSideNav;
