'use strict';

const Module = require('module');
const path = require('path');
const { transformAsync } = require('@babel/core');
const { getAttributes, formatAttributes } = require('@carbon/icon-helpers');

/**
 * @param {string} p A path.
 * @returns {string} The given path relative to current working directory.
 */
const rel = p => path.relative(process.cwd(), p);

/**
 * @param {string} code A commonJS module code.
 * @param {string} filename The filename of the module.
 * @param {Object} context The WebPack context in use.
 * @returns The exports of the given module.
 */
const exec = (code, filename, context) => {
  const module = new Module(filename, this);
  module.paths = Module._nodeModulePaths(context);
  module.filename = filename;
  module._compile(code, filename);
  return module.exports;
};

// TODO: update @carbon/icon-helpers with this version of toString
const toString = descriptor => {
  if (typeof descriptor === 'string') {
    return descriptor;
  }
  const { elem = 'svg', attrs = {}, content = [] } = descriptor;
  const children = content.map(toString).join('');
  if (elem !== 'svg') {
    return `<${elem} ${formatAttributes(attrs)}>${children}</${elem}>`;
  }
  return `<${elem} ${formatAttributes(getAttributes(attrs))}>${children}</${elem}>`;
};

/**
 * Function that takes a valid @carbon/icons style icon descriptor and returns a lit-html svg instance
 * @param {object} descriptor Object representation of an SVG icon as generated by @carbon/icons
 */
const icon = descriptor => {
  descriptor.attrs = getAttributes(
    Object.assign(descriptor.attrs, {
      '...': '${spread(attrs)}', // eslint-disable-line no-template-curly-in-string
    })
  );
  descriptor.content.unshift('${children}'); // eslint-disable-line no-template-curly-in-string
  return toString(descriptor);
};

/**
 * A WebPack loader to generate `lit-html`'s `SVGResult` from an icon descriptor from `@carbon/icons`.
 * @returns {string} The massaged module content.
 */
function svgResultCarbonIconLoader(fileContent) {
  const callback = this.async();

  transformAsync(fileContent, {
    plugins: ['@babel/plugin-transform-modules-commonjs'], // So `exec()` understands the code
  }).then(({ code }) => {
    const exports = exec(code, this.resource, this.context);
    const descriptor = exports && exports.default ? exports.default : exports;

    if (Object(descriptor) !== descriptor) {
      throw new TypeError(`The module does not seem to export an icon desctiptor: ${rel(this.resource)}`);
    }

    const result = `
      import { svg } from 'lit-html';
      import spread from '${path.resolve(__dirname, 'src/globals/directives/spread')}';
      const svgResultCarbonIcon = ({ children, ...attrs }) => svg\`${icon(descriptor)}\`;
      export default svgResultCarbonIcon;
    `;
    callback(null, result);
  });
}

module.exports = svgResultCarbonIconLoader;
